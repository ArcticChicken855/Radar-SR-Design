# Copyright (C) 2023 Infineon Technologies AG
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. Neither the name of the copyright holder nor the names of its
#    contributors may be used to endorse or promote products derived from
#    this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

# This file was automatically generated by generate_exceptions.py, do not alter this file.

"""
Definition of exceptions.
"""

class GeneralError(Exception):
    def __init__(self, error_code : int, error_description : str):
        '''Create new RadarSDKException with error code given by error'''
        self.error_code = error_code
        self.error_description = error_description

    def __repr__(self):
        '''Exception message'''
        return self.error_description

class ErrorApiBase(GeneralError):
    '''Error class for ErrorApiBase'''
    pass

class ErrorDevBase(GeneralError):
    '''Error class for ErrorDevBase'''
    pass

class ErrorHostBase(GeneralError):
    '''Error class for ErrorHostBase'''
    pass

class ErrorAppBase(GeneralError):
    '''Error class for ErrorAppBase'''
    pass

class Error(ErrorApiBase):
    '''A generic error occurred in radar SDK API. (IFX_ERROR)
    '''
    def __init__(self, error_description):
        super().__init__(0x10000, error_description)

class ErrorArgumentNull(ErrorApiBase):
    '''Argument Null error. (IFX_ERROR_ARGUMENT_NULL)
    '''
    def __init__(self, error_description):
        super().__init__(0x10001, error_description)

class ErrorArgumentInvalid(ErrorApiBase):
    '''Argument invalid error. (IFX_ERROR_ARGUMENT_INVALID)
    '''
    def __init__(self, error_description):
        super().__init__(0x10002, error_description)

class ErrorArgumentOutOfBounds(ErrorApiBase):
    '''Argument out of bounds. (IFX_ERROR_ARGUMENT_OUT_OF_BOUNDS)
    '''
    def __init__(self, error_description):
        super().__init__(0x10003, error_description)

class ErrorArgumentInvalidExpectedReal(ErrorApiBase):
    '''Argument invalid expected real.
    (IFX_ERROR_ARGUMENT_INVALID_EXPECTED_REAL)
    '''
    def __init__(self, error_description):
        super().__init__(0x10004, error_description)

class ErrorArgumentInvalidExpectedComplex(ErrorApiBase):
    '''Argument invalid expected complex.
    (IFX_ERROR_ARGUMENT_INVALID_EXPECTED_COMPLEX)
    '''
    def __init__(self, error_description):
        super().__init__(0x10005, error_description)

class ErrorIndexOutOfBounds(ErrorApiBase):
    '''Index out of bounds. (IFX_ERROR_INDEX_OUT_OF_BOUNDS)
    '''
    def __init__(self, error_description):
        super().__init__(0x10006, error_description)

class ErrorDimensionMismatch(ErrorApiBase):
    '''Dimension mismatch. (IFX_ERROR_DIMENSION_MISMATCH)
    '''
    def __init__(self, error_description):
        super().__init__(0x10007, error_description)

class ErrorMemoryAllocationFailed(ErrorApiBase):
    '''Memory allocation failed. (IFX_ERROR_MEMORY_ALLOCATION_FAILED)
    '''
    def __init__(self, error_description):
        super().__init__(0x10008, error_description)

class ErrorInPlaceCalculationNotSupported(ErrorApiBase):
    '''In place calculation not supported.
    (IFX_ERROR_IN_PLACE_CALCULATION_NOT_SUPPORTED)
    '''
    def __init__(self, error_description):
        super().__init__(0x10009, error_description)

class ErrorMatrixSingular(ErrorApiBase):
    '''Matrix is singular. (IFX_ERROR_MATRIX_SINGULAR)
    '''
    def __init__(self, error_description):
        super().__init__(0x1000A, error_description)

class ErrorMatrixNotPositiveDefinite(ErrorApiBase):
    '''Matrix is not positive definite.
    (IFX_ERROR_MATRIX_NOT_POSITIVE_DEFINITE)
    '''
    def __init__(self, error_description):
        super().__init__(0x1000B, error_description)

class ErrorNotSupported(ErrorApiBase):
    '''Generic error for unsupported API. (IFX_ERROR_NOT_SUPPORTED)
    '''
    def __init__(self, error_description):
        super().__init__(0x1000C, error_description)

class ErrorInternal(ErrorApiBase):
    '''Generic internal logic error (IFX_ERROR_INTERNAL)
    '''
    def __init__(self, error_description):
        super().__init__(0x1000D, error_description)

class ErrorNotPossible(ErrorApiBase):
    '''In current configuration/state/device type requested action is not
    possible (IFX_ERROR_NOT_POSSIBLE)
    '''
    def __init__(self, error_description):
        super().__init__(0x1000E, error_description)

class ErrorMissingInterface(ErrorApiBase):
    '''Interface is missing or nullptr (IFX_ERROR_MISSING_INTERFACE)
    '''
    def __init__(self, error_description):
        super().__init__(0x1000F, error_description)

class ErrorNotImplemented(ErrorApiBase):
    '''Generic Error for non-implemented feature (IFX_ERROR_NOT_IMPLEMENTED)
    '''
    def __init__(self, error_description):
        super().__init__(0x10010, error_description)

class ErrorNoDevice(ErrorDevBase):
    '''No device compatible to Radar SDK was found. (IFX_ERROR_NO_DEVICE)
    '''
    def __init__(self, error_description):
        super().__init__(0x11000, error_description)

class ErrorDeviceBusy(ErrorDevBase):
    '''The connected device is busy and cannot perform the requested action.
    This can happen during device handle creation when the device is in an
    undefined state. It is recommended to unplug and replug the device.
    (IFX_ERROR_DEVICE_BUSY)
    '''
    def __init__(self, error_description):
        super().__init__(0x11001, error_description)

class ErrorCommunicationError(ErrorDevBase):
    '''The communication between host computer and device is disturbed. This
    error is also returned when the device sends an unexpected error code.
    (IFX_ERROR_COMMUNICATION_ERROR)
    '''
    def __init__(self, error_description):
        super().__init__(0x11002, error_description)

class ErrorNumSamplesOutOfRange(ErrorDevBase):
    '''The device does not support the requested number of samples, because
    the requested number is too high. (IFX_ERROR_NUM_SAMPLES_OUT_OF_RANGE)
    '''
    def __init__(self, error_description):
        super().__init__(0x11003, error_description)

class ErrorRxAntennaCombinationNotAllowed(ErrorDevBase):
    '''The device does not support the requested combination of RX antennas
    to be enabled. This error typically occurs when a non-existing antenna
    is requested to be enabled.
    (IFX_ERROR_RX_ANTENNA_COMBINATION_NOT_ALLOWED)
    '''
    def __init__(self, error_description):
        super().__init__(0x11004, error_description)

class ErrorIfGainOutOfRange(ErrorDevBase):
    '''The device does not support the requested IF gain, because the
    requested gain is either too high or too low.
    (IFX_ERROR_IF_GAIN_OUT_OF_RANGE)
    '''
    def __init__(self, error_description):
        super().__init__(0x11005, error_description)

class ErrorSamplerateOutOfRange(ErrorDevBase):
    '''The device does not support the requested sampling rate, because the
    requested rate is either too high or too low.
    (IFX_ERROR_SAMPLERATE_OUT_OF_RANGE)
    '''
    def __init__(self, error_description):
        super().__init__(0x11006, error_description)

class ErrorRfOutOfRange(ErrorDevBase):
    '''The requested FMCW start and end frequency are not in the supported RF
    range of the device. (IFX_ERROR_RF_OUT_OF_RANGE)
    '''
    def __init__(self, error_description):
        super().__init__(0x11007, error_description)

class ErrorTxPowerOutOfRange(ErrorDevBase):
    '''The device does not support the requested TX power, because the
    requested value is too high. (IFX_ERROR_TX_POWER_OUT_OF_RANGE)
    '''
    def __init__(self, error_description):
        super().__init__(0x11008, error_description)

class ErrorChirpRateOutOfRange(ErrorDevBase):
    '''The requested chirp-to-chirp time cannot be applied. This typically
    happens when the requested time is shorter than the chirp duration
    resulting from the specified sampling rate and number of samples.
    (IFX_ERROR_CHIRP_RATE_OUT_OF_RANGE)
    '''
    def __init__(self, error_description):
        super().__init__(0x11009, error_description)

class ErrorFrameRateOutOfRange(ErrorDevBase):
    '''The requested frame period cannot be applied. This typically happens
    when the requested period is shorter than the frame duration resulting
    from the specified sampling rate, number of samples and chirp-to-chirp
    time. (IFX_ERROR_FRAME_RATE_OUT_OF_RANGE)
    '''
    def __init__(self, error_description):
        super().__init__(0x1100A, error_description)

class ErrorNumChirpsNotAllowed(ErrorDevBase):
    '''The device does not support the requested number of chirps per frame,
    because the number is too high. (IFX_ERROR_NUM_CHIRPS_NOT_ALLOWED)
    '''
    def __init__(self, error_description):
        super().__init__(0x1100B, error_description)

class ErrorFrameSizeNotSupported(ErrorDevBase):
    '''The device does not support the frame size resulting from specified
    number of chirps, number of samples and number of antennas.
    (IFX_ERROR_FRAME_SIZE_NOT_SUPPORTED)
    '''
    def __init__(self, error_description):
        super().__init__(0x1100C, error_description)

class ErrorTimeout(ErrorDevBase):
    '''The device did not acquire a complete time domain data frame within
    the expected time. (IFX_ERROR_TIMEOUT)
    '''
    def __init__(self, error_description):
        super().__init__(0x1100D, error_description)

class ErrorFifoOverflow(ErrorDevBase):
    '''The device stopped acquisition of time domain data due to an internal
    buffer overflow. This happens when time domain data is acquired faster
    than it is read from the device. (IFX_ERROR_FIFO_OVERFLOW)
    '''
    def __init__(self, error_description):
        super().__init__(0x1100E, error_description)

class ErrorTxAntennaModeNotAllowed(ErrorDevBase):
    '''The device does not support the requested mode of TX antennas to be
    used. This error typically occurs when a the requested tx_mode is not
    supported by the device due to non availability of TX antennas for
    that mode. (IFX_ERROR_TX_ANTENNA_MODE_NOT_ALLOWED)
    '''
    def __init__(self, error_description):
        super().__init__(0x1100F, error_description)

class ErrorFirmwareVersionNotSupported(ErrorDevBase):
    '''The firmware version is no longer supported. Please update the
    firmware to the latest version.
    (IFX_ERROR_FIRMWARE_VERSION_NOT_SUPPORTED)
    '''
    def __init__(self, error_description):
        super().__init__(0x11010, error_description)

class ErrorDeviceNotSupported(ErrorDevBase):
    '''The device is not supported. (IFX_ERROR_DEVICE_NOT_SUPPORTED)
    '''
    def __init__(self, error_description):
        super().__init__(0x11011, error_description)

class ErrorBasebandConfigNotAllowed(ErrorDevBase):
    '''The device does not support the requested baseband configurations
    @cond Doxygen_Suppress  @endcond ifx_Avian_Baseband_Config_t.
    (IFX_ERROR_BASEBAND_CONFIG_NOT_ALLOWED)
    '''
    def __init__(self, error_description):
        super().__init__(0x11012, error_description)

class ErrorAdcConfigNotAllowed(ErrorDevBase):
    '''The device does not support the requested ADC configurations @cond
    Doxygen_Suppress  @endcond ifx_Avian_ADC_Config_t.
    (IFX_ERROR_ADC_CONFIG_NOT_ALLOWED)
    '''
    def __init__(self, error_description):
        super().__init__(0x11013, error_description)

class ErrorTestSignalModeNotAllowed(ErrorDevBase):
    '''The device does not support the requested mode for test signal
    generator @cond Doxygen_Suppress  @endcond
    ifx_Avian_Test_Signal_Generator_t.
    (IFX_ERROR_TEST_SIGNAL_MODE_NOT_ALLOWED)
    '''
    def __init__(self, error_description):
        super().__init__(0x11014, error_description)

class ErrorFrameAcquisitionFailed(ErrorDevBase):
    '''The device does not succeed to capture ADC raw data.
    (IFX_ERROR_FRAME_ACQUISITION_FAILED)
    '''
    def __init__(self, error_description):
        super().__init__(0x11015, error_description)

class ErrorTemperatureMeasurementFailed(ErrorDevBase):
    '''The device does not succeed to measure the temperature value.
    (IFX_ERROR_TEMPERATURE_MEASUREMENT_FAILED)
    '''
    def __init__(self, error_description):
        super().__init__(0x11016, error_description)

class ErrorPowerMeasurementFailed(ErrorDevBase):
    '''The device does not succeed to measure the power value.
    (IFX_ERROR_POWER_MEASUREMENT_FAILED)
    '''
    def __init__(self, error_description):
        super().__init__(0x11017, error_description)

class ErrorTxAntennaCombinationNotAllowed(ErrorDevBase):
    '''The device does not support the requested combination of TX antennas
    to be enabled. This error typically occurs when a non-existing antenna
    is requested to be enabled.
    (IFX_ERROR_TX_ANTENNA_COMBINATION_NOT_ALLOWED)
    '''
    def __init__(self, error_description):
        super().__init__(0x11018, error_description)

class ErrorSequencerError(ErrorDevBase):
    '''The device reports a sequencer error. (IFX_ERROR_SEQUENCER_ERROR)
    '''
    def __init__(self, error_description):
        super().__init__(0x11019, error_description)

class ErrorEeprom(ErrorDevBase):
    '''An error occurred while reading or writing the EEPROM. This error
    might occur if an RF shield does not have an EEPROM, the EEPROM is
    broker or not correctly initialized. (IFX_ERROR_EEPROM)
    '''
    def __init__(self, error_description):
        super().__init__(0x11020, error_description)

class ErrorNotConfigured(ErrorDevBase):
    '''The device is not configured and requested action is not possible.
    (IFX_ERROR_NOT_CONFIGURED)
    '''
    def __init__(self, error_description):
        super().__init__(0x11021, error_description)

class ErrorInsufficientMemoryAllocated(ErrorDevBase):
    '''The memory that has been allocated is not sufficient for the current
    settings (IFX_ERROR_INSUFFICIENT_MEMORY_ALLOCATED)
    '''
    def __init__(self, error_description):
        super().__init__(0x11022, error_description)

class ErrorNumFramesOutOfRange(ErrorDevBase):
    '''The memory that has been allocated is not sufficient for the current
    settings (IFX_ERROR_NUM_FRAMES_OUT_OF_RANGE)
    '''
    def __init__(self, error_description):
        super().__init__(0x11023, error_description)

class ErrorHost(ErrorHostBase):
    '''A generic error occurred on Host side (IFX_ERROR_HOST)
    '''
    def __init__(self, error_description):
        super().__init__(0x30000, error_description)

class ErrorOpeningFile(ErrorHostBase):
    '''Problem opening file. File might not exist or is corrupted.
    (IFX_ERROR_OPENING_FILE)
    '''
    def __init__(self, error_description):
        super().__init__(0x30001, error_description)

class ErrorFileInvalid(ErrorHostBase):
    '''Invalid file. (IFX_ERROR_FILE_INVALID)
    '''
    def __init__(self, error_description):
        super().__init__(0x30002, error_description)

class ErrorEmptyDirectory(ErrorHostBase):
    '''The directory is empty, which is not intended.
    (IFX_ERROR_EMPTY_DIRECTORY)
    '''
    def __init__(self, error_description):
        super().__init__(0x30003, error_description)

class ErrorInvalidJson(ErrorHostBase):
    '''Problem parsing a json file. Incorrect JSON structure.
    (IFX_ERROR_INVALID_JSON)
    '''
    def __init__(self, error_description):
        super().__init__(0x30004, error_description)

class ErrorInvalidJsonKey(ErrorHostBase):
    '''Problem parsing a json file. Incorrect key used or not existing key.
    (IFX_ERROR_INVALID_JSON_KEY)
    '''
    def __init__(self, error_description):
        super().__init__(0x30005, error_description)

class ErrorInvalidJsonValue(ErrorHostBase):
    '''Problem parsing a json file. Incorrect value at given key.
    (IFX_ERROR_INVALID_JSON_VALUE)
    '''
    def __init__(self, error_description):
        super().__init__(0x30006, error_description)

class ErrorEndOfFile(ErrorHostBase):
    '''Reached the end of the file. (IFX_ERROR_END_OF_FILE)
    '''
    def __init__(self, error_description):
        super().__init__(0x30007, error_description)

class ErrorApp(ErrorAppBase):
    '''A generic error occurred on Application side (IFX_ERROR_APP)
    '''
    def __init__(self, error_description):
        super().__init__(0x80000000, error_description)


error_mapping_exception = {
    65536: Error,
    65537: ErrorArgumentNull,
    65538: ErrorArgumentInvalid,
    65539: ErrorArgumentOutOfBounds,
    65540: ErrorArgumentInvalidExpectedReal,
    65541: ErrorArgumentInvalidExpectedComplex,
    65542: ErrorIndexOutOfBounds,
    65543: ErrorDimensionMismatch,
    65544: ErrorMemoryAllocationFailed,
    65545: ErrorInPlaceCalculationNotSupported,
    65546: ErrorMatrixSingular,
    65547: ErrorMatrixNotPositiveDefinite,
    65548: ErrorNotSupported,
    65549: ErrorInternal,
    65550: ErrorNotPossible,
    65551: ErrorMissingInterface,
    65552: ErrorNotImplemented,
    69632: ErrorNoDevice,
    69633: ErrorDeviceBusy,
    69634: ErrorCommunicationError,
    69635: ErrorNumSamplesOutOfRange,
    69636: ErrorRxAntennaCombinationNotAllowed,
    69637: ErrorIfGainOutOfRange,
    69638: ErrorSamplerateOutOfRange,
    69639: ErrorRfOutOfRange,
    69640: ErrorTxPowerOutOfRange,
    69641: ErrorChirpRateOutOfRange,
    69642: ErrorFrameRateOutOfRange,
    69643: ErrorNumChirpsNotAllowed,
    69644: ErrorFrameSizeNotSupported,
    69645: ErrorTimeout,
    69646: ErrorFifoOverflow,
    69647: ErrorTxAntennaModeNotAllowed,
    69648: ErrorFirmwareVersionNotSupported,
    69649: ErrorDeviceNotSupported,
    69650: ErrorBasebandConfigNotAllowed,
    69651: ErrorAdcConfigNotAllowed,
    69652: ErrorTestSignalModeNotAllowed,
    69653: ErrorFrameAcquisitionFailed,
    69654: ErrorTemperatureMeasurementFailed,
    69655: ErrorPowerMeasurementFailed,
    69656: ErrorTxAntennaCombinationNotAllowed,
    69657: ErrorSequencerError,
    69664: ErrorEeprom,
    69665: ErrorNotConfigured,
    69666: ErrorInsufficientMemoryAllocated,
    69667: ErrorNumFramesOutOfRange,
    196608: ErrorHost,
    196609: ErrorOpeningFile,
    196610: ErrorFileInvalid,
    196611: ErrorEmptyDirectory,
    196612: ErrorInvalidJson,
    196613: ErrorInvalidJsonKey,
    196614: ErrorInvalidJsonValue,
    196615: ErrorEndOfFile,
    2147483648: ErrorApp,
}


def get_exception(error_code : int, error_description : str ="Unknown error"):
    try:
        return error_mapping_exception[error_code](error_description)
    except:
        return GeneralError(error_code, error_description)
